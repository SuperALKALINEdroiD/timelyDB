// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: node.proto

package nodes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeServiceClient interface {
	SearchNode(ctx context.Context, in *NodeSearchRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	SearchNodeStream(ctx context.Context, in *NodeSearchRequest, opts ...grpc.CallOption) (NodeService_SearchNodeStreamClient, error)
	BatchSearch(ctx context.Context, in *NodeBatchRequest, opts ...grpc.CallOption) (*NodeBatchResponse, error)
	ManipulateNode(ctx context.Context, in *NodeManipulationRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	BatchManipulate(ctx context.Context, in *NodeBatchRequest, opts ...grpc.CallOption) (*NodeBatchResponse, error)
	StreamNodeUpdates(ctx context.Context, opts ...grpc.CallOption) (NodeService_StreamNodeUpdatesClient, error)
}

type nodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeServiceClient(cc grpc.ClientConnInterface) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) SearchNode(ctx context.Context, in *NodeSearchRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/NodeService/SearchNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) SearchNodeStream(ctx context.Context, in *NodeSearchRequest, opts ...grpc.CallOption) (NodeService_SearchNodeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[0], "/NodeService/SearchNodeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceSearchNodeStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_SearchNodeStreamClient interface {
	Recv() (*NodeResponse, error)
	grpc.ClientStream
}

type nodeServiceSearchNodeStreamClient struct {
	grpc.ClientStream
}

func (x *nodeServiceSearchNodeStreamClient) Recv() (*NodeResponse, error) {
	m := new(NodeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeServiceClient) BatchSearch(ctx context.Context, in *NodeBatchRequest, opts ...grpc.CallOption) (*NodeBatchResponse, error) {
	out := new(NodeBatchResponse)
	err := c.cc.Invoke(ctx, "/NodeService/BatchSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) ManipulateNode(ctx context.Context, in *NodeManipulationRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/NodeService/ManipulateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) BatchManipulate(ctx context.Context, in *NodeBatchRequest, opts ...grpc.CallOption) (*NodeBatchResponse, error) {
	out := new(NodeBatchResponse)
	err := c.cc.Invoke(ctx, "/NodeService/BatchManipulate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) StreamNodeUpdates(ctx context.Context, opts ...grpc.CallOption) (NodeService_StreamNodeUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[1], "/NodeService/StreamNodeUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceStreamNodeUpdatesClient{stream}
	return x, nil
}

type NodeService_StreamNodeUpdatesClient interface {
	Send(*NodeSearchRequest) error
	Recv() (*NodeResponse, error)
	grpc.ClientStream
}

type nodeServiceStreamNodeUpdatesClient struct {
	grpc.ClientStream
}

func (x *nodeServiceStreamNodeUpdatesClient) Send(m *NodeSearchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeServiceStreamNodeUpdatesClient) Recv() (*NodeResponse, error) {
	m := new(NodeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeServiceServer is the server API for NodeService service.
// All implementations must embed UnimplementedNodeServiceServer
// for forward compatibility
type NodeServiceServer interface {
	SearchNode(context.Context, *NodeSearchRequest) (*NodeResponse, error)
	SearchNodeStream(*NodeSearchRequest, NodeService_SearchNodeStreamServer) error
	BatchSearch(context.Context, *NodeBatchRequest) (*NodeBatchResponse, error)
	ManipulateNode(context.Context, *NodeManipulationRequest) (*NodeResponse, error)
	BatchManipulate(context.Context, *NodeBatchRequest) (*NodeBatchResponse, error)
	StreamNodeUpdates(NodeService_StreamNodeUpdatesServer) error
	mustEmbedUnimplementedNodeServiceServer()
}

// UnimplementedNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServiceServer struct {
}

func (UnimplementedNodeServiceServer) SearchNode(context.Context, *NodeSearchRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNode not implemented")
}
func (UnimplementedNodeServiceServer) SearchNodeStream(*NodeSearchRequest, NodeService_SearchNodeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchNodeStream not implemented")
}
func (UnimplementedNodeServiceServer) BatchSearch(context.Context, *NodeBatchRequest) (*NodeBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSearch not implemented")
}
func (UnimplementedNodeServiceServer) ManipulateNode(context.Context, *NodeManipulationRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManipulateNode not implemented")
}
func (UnimplementedNodeServiceServer) BatchManipulate(context.Context, *NodeBatchRequest) (*NodeBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchManipulate not implemented")
}
func (UnimplementedNodeServiceServer) StreamNodeUpdates(NodeService_StreamNodeUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamNodeUpdates not implemented")
}
func (UnimplementedNodeServiceServer) mustEmbedUnimplementedNodeServiceServer() {}

// UnsafeNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServiceServer will
// result in compilation errors.
type UnsafeNodeServiceServer interface {
	mustEmbedUnimplementedNodeServiceServer()
}

func RegisterNodeServiceServer(s grpc.ServiceRegistrar, srv NodeServiceServer) {
	s.RegisterService(&NodeService_ServiceDesc, srv)
}

func _NodeService_SearchNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).SearchNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NodeService/SearchNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).SearchNode(ctx, req.(*NodeSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_SearchNodeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NodeSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).SearchNodeStream(m, &nodeServiceSearchNodeStreamServer{stream})
}

type NodeService_SearchNodeStreamServer interface {
	Send(*NodeResponse) error
	grpc.ServerStream
}

type nodeServiceSearchNodeStreamServer struct {
	grpc.ServerStream
}

func (x *nodeServiceSearchNodeStreamServer) Send(m *NodeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeService_BatchSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).BatchSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NodeService/BatchSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).BatchSearch(ctx, req.(*NodeBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_ManipulateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeManipulationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).ManipulateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NodeService/ManipulateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).ManipulateNode(ctx, req.(*NodeManipulationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_BatchManipulate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).BatchManipulate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NodeService/BatchManipulate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).BatchManipulate(ctx, req.(*NodeBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_StreamNodeUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServiceServer).StreamNodeUpdates(&nodeServiceStreamNodeUpdatesServer{stream})
}

type NodeService_StreamNodeUpdatesServer interface {
	Send(*NodeResponse) error
	Recv() (*NodeSearchRequest, error)
	grpc.ServerStream
}

type nodeServiceStreamNodeUpdatesServer struct {
	grpc.ServerStream
}

func (x *nodeServiceStreamNodeUpdatesServer) Send(m *NodeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeServiceStreamNodeUpdatesServer) Recv() (*NodeSearchRequest, error) {
	m := new(NodeSearchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeService_ServiceDesc is the grpc.ServiceDesc for NodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchNode",
			Handler:    _NodeService_SearchNode_Handler,
		},
		{
			MethodName: "BatchSearch",
			Handler:    _NodeService_BatchSearch_Handler,
		},
		{
			MethodName: "ManipulateNode",
			Handler:    _NodeService_ManipulateNode_Handler,
		},
		{
			MethodName: "BatchManipulate",
			Handler:    _NodeService_BatchManipulate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchNodeStream",
			Handler:       _NodeService_SearchNodeStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamNodeUpdates",
			Handler:       _NodeService_StreamNodeUpdates_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "node.proto",
}
